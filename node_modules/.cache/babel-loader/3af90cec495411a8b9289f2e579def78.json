{"ast":null,"code":"import _classCallCheck from \"/Users/ewg_mac1/Desktop/Code/ReactCode/DNReact/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ewg_mac1/Desktop/Code/ReactCode/DNReact/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport axios from 'axios';\nvar base_url = \"http://localhost:3000\";\nvar instance = axios.create({\n  baseURL: base_url,\n  timeout: 15000,\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'\n  }\n});\ninstance.interceptors.request.use(function (config) {\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\ninstance.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  // do something with response error\n  return Promise.reject(error);\n});\n\nvar DNAxiosTool =\n/*#__PURE__*/\nfunction () {\n  function DNAxiosTool() {\n    _classCallCheck(this, DNAxiosTool);\n  }\n\n  _createClass(DNAxiosTool, null, [{\n    key: \"post\",\n    value: function post(api, param) {\n      return new Promise(function (resolve, reject) {\n        instance.post(api, param).then(function (response) {\n          resolve(response.data);\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function get(api, param) {\n      return new Promise(function (resolve, reject) {\n        instance.get(api, param).then(function (response) {\n          resolve(response.data);\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    }\n  }]);\n\n  return DNAxiosTool;\n}();\n\nexport default DNAxiosTool;\n/***\n * \n * \n *         var ajax = new XMLHttpRequest();\n        ajax.onreadystatechange = function(){\n            debugger\n            // console.log(ajax.readyState);\n            // console.log(ajax.status);\n            console.log(ajax.response);\n            // 第五步：在监听函数中，判断readyState=4 && status=200表示请求成功\n            if(ajax.readyState==4 && ajax.status==200){\n                // 第六步： 使用responseText、responseXML接受响应数据，并使用原生JS操作DOM进行显示\n                \n                console.log(ajax.responseXML);// 返回不是XML，显示null\n                console.log(JSON.parse(ajax.responseText));\n                console.log(eval(\"(\"+ajax.responseText+\")\"));\n            }\n        }\n        // 第三步： open一个链接\n        ajax.open(\"GET\",'http://localhost:3000/v1/get_entry_by_hot_recomment?device_id=D2F3A47D-6BCA-446A-8D91-C2B7F1068DE1&limit=3&src=ios&token=eyJhY2Nlc3NfdG9rZW4iOiJWMGZIQjNYd1ROazZNRXEzIiwicmVmcmVzaF90b2tlbiI6IllOT3hBMXhOSVU4dXNiSmEiLCJ0b2tlbl90eXBlIjoibWFjIiwiZXhwaXJlX2luIjoyNTkyMDAwfQ%3D%3D&uid=5b8390f3e51d45389d3b5028',true);//true异步请求，false同步\n        // 第四步： send一个请求。 可以发送对象和字符串，不需要传递数据发送null\n        ajax.send(null);\n\n */","map":{"version":3,"sources":["/Users/ewg_mac1/Desktop/Code/ReactCode/DNReact/src/NetworkCenter/DNAxios.js"],"names":["axios","base_url","instance","create","baseURL","timeout","headers","interceptors","request","use","config","error","Promise","reject","response","DNAxiosTool","api","param","resolve","post","then","data","catch","get"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,QAAQ,GAAG,uBAAjB;AAEA,IAAIC,QAAQ,GAAGF,KAAK,CAACG,MAAN,CAAa;AACxBC,EAAAA,OAAO,EAAGH,QADc;AAExBI,EAAAA,OAAO,EAAG,KAFc;AAGxBC,EAAAA,OAAO,EAAG;AACN,oBAAgB;AADV;AAHc,CAAb,CAAf;AAQAJ,QAAQ,CAACK,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkC,UAASC,MAAT,EAAgB;AAC9C,SAAOA,MAAP;AACH,CAFD,EAEE,UAASC,KAAT,EAAe;AACb,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAJD;AAOAT,QAAQ,CAACK,YAAT,CAAsBO,QAAtB,CAA+BL,GAA/B,CAAmC,UAASK,QAAT,EAAkB;AACjD,SAAOA,QAAP;AACH,CAFD,EAEE,UAASH,KAAT,EAAe;AACb;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CALD;;IAQMI,W;;;;;;;;;yBAEWC,G,EAAMC,K,EAAM;AACrB,aAAO,IAAIL,OAAJ,CAAY,UAACM,OAAD,EAAUL,MAAV,EAAqB;AACpCX,QAAAA,QAAQ,CAACiB,IAAT,CAAcH,GAAd,EAAkBC,KAAlB,EAAyBG,IAAzB,CAA8B,UAAAN,QAAQ,EAAE;AACpCI,UAAAA,OAAO,CAACJ,QAAQ,CAACO,IAAV,CAAP;AACH,SAFD,EAEGC,KAFH,CAES,UAAAX,KAAK,EAAE;AACZE,UAAAA,MAAM,CAACF,KAAD,CAAN;AACH,SAJD;AAKH,OANM,CAAP;AAOH;;;wBAEUK,G,EAAMC,K,EAAM;AACnB,aAAO,IAAIL,OAAJ,CAAY,UAACM,OAAD,EAAUL,MAAV,EAAqB;AACpCX,QAAAA,QAAQ,CAACqB,GAAT,CAAaP,GAAb,EAAiBC,KAAjB,EAAwBG,IAAxB,CAA6B,UAAAN,QAAQ,EAAE;AACnCI,UAAAA,OAAO,CAACJ,QAAQ,CAACO,IAAV,CAAP;AACH,SAFD,EAEGC,KAFH,CAES,UAAAX,KAAK,EAAE;AACZE,UAAAA,MAAM,CAACF,KAAD,CAAN;AACH,SAJD;AAKH,OANM,CAAP;AAOH;;;;;;AAGL,eAAeI,WAAf;AAEA","sourcesContent":["import axios from 'axios'\n\nconst base_url = \"http://localhost:3000\"\n\nvar instance = axios.create({\n    baseURL : base_url,\n    timeout : 15000,\n    headers : {\n        'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',\n    }\n})\n\ninstance.interceptors.request.use(function(config){\n    return config;\n},function(error){\n    return Promise.reject(error);\n})\n\n\ninstance.interceptors.response.use(function(response){\n    return response;\n},function(error){\n    // do something with response error\n    return Promise.reject(error)\n})\n\n\nclass DNAxiosTool {\n\n    static post (api , param){\n        return new Promise((resolve ,reject) => {\n            instance.post(api,param).then(response=>{\n                resolve(response.data)\n            }).catch(error=>{\n                reject(error);\n            })\n        })\n    }\n\n    static get(api , param){\n        return new Promise((resolve ,reject) => {\n            instance.get(api,param).then(response=>{\n                resolve(response.data)\n            }).catch(error=>{\n                reject(error);\n            })\n        })\n    }\n}\n\nexport default DNAxiosTool;\n\n/***\n * \n * \n *         var ajax = new XMLHttpRequest();\n        ajax.onreadystatechange = function(){\n            debugger\n            // console.log(ajax.readyState);\n            // console.log(ajax.status);\n            console.log(ajax.response);\n            // 第五步：在监听函数中，判断readyState=4 && status=200表示请求成功\n            if(ajax.readyState==4 && ajax.status==200){\n                // 第六步： 使用responseText、responseXML接受响应数据，并使用原生JS操作DOM进行显示\n                \n                console.log(ajax.responseXML);// 返回不是XML，显示null\n                console.log(JSON.parse(ajax.responseText));\n                console.log(eval(\"(\"+ajax.responseText+\")\"));\n            }\n        }\n        // 第三步： open一个链接\n        ajax.open(\"GET\",'http://localhost:3000/v1/get_entry_by_hot_recomment?device_id=D2F3A47D-6BCA-446A-8D91-C2B7F1068DE1&limit=3&src=ios&token=eyJhY2Nlc3NfdG9rZW4iOiJWMGZIQjNYd1ROazZNRXEzIiwicmVmcmVzaF90b2tlbiI6IllOT3hBMXhOSVU4dXNiSmEiLCJ0b2tlbl90eXBlIjoibWFjIiwiZXhwaXJlX2luIjoyNTkyMDAwfQ%3D%3D&uid=5b8390f3e51d45389d3b5028',true);//true异步请求，false同步\n        // 第四步： send一个请求。 可以发送对象和字符串，不需要传递数据发送null\n        ajax.send(null);\n\n */"]},"metadata":{},"sourceType":"module"}