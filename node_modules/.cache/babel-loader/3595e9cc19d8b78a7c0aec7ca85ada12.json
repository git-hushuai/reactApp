{"ast":null,"code":"import _classCallCheck from \"/Users/ewg_mac1/Desktop/Code/ReactCode/reactDemo/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ewg_mac1/Desktop/Code/ReactCode/reactDemo/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport axios from 'axios';\nvar base_url = \"http://localhost:3000\";\nvar instance = axios.create({\n  baseURL: base_url,\n  timeout: 15000,\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'\n  }\n});\ninstance.interceptors.request.use(function (config) {\n  return config;\n}, function (rrror) {\n  return Promise.reject(error);\n});\ninstance.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  // do something with response error\n  return Promise.reject(error);\n});\n\nvar DNAxiosTool =\n/*#__PURE__*/\nfunction () {\n  function DNAxiosTool() {\n    _classCallCheck(this, DNAxiosTool);\n  }\n\n  _createClass(DNAxiosTool, null, [{\n    key: \"post\",\n    value: function post(api, param) {\n      return new Promise(function (resolve, reject) {\n        instance.post(api, param).then(function (response) {\n          resolve(response);\n        });\n      }).catch(function (error) {\n        reject(error);\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function get(api, param) {\n      debugger;\n      instance.get(api, param).then(function (response) {\n        resolve(response);\n      }).catch(function (error) {\n        reject(error);\n      });\n    }\n  }]);\n\n  return DNAxiosTool;\n}();\n\nexport default DNAxiosTool;","map":{"version":3,"sources":["/Users/ewg_mac1/Desktop/Code/ReactCode/reactDemo/my-app/src/NetworkCenter/DNAxios.js"],"names":["axios","base_url","instance","create","baseURL","timeout","headers","interceptors","request","use","config","rrror","Promise","reject","error","response","DNAxiosTool","api","param","resolve","post","then","catch","get"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,QAAQ,GAAG,uBAAjB;AAEA,IAAIC,QAAQ,GAAGF,KAAK,CAACG,MAAN,CAAa;AACxBC,EAAAA,OAAO,EAAGH,QADc;AAExBI,EAAAA,OAAO,EAAG,KAFc;AAGxBC,EAAAA,OAAO,EAAG;AACN,oBAAgB;AADV;AAHc,CAAb,CAAf;AAQAJ,QAAQ,CAACK,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkC,UAASC,MAAT,EAAgB;AAC9C,SAAOA,MAAP;AACH,CAFD,EAEE,UAASC,KAAT,EAAe;AACb,SAAOC,OAAO,CAACC,MAAR,CAAeC,KAAf,CAAP;AACH,CAJD;AAOAZ,QAAQ,CAACK,YAAT,CAAsBQ,QAAtB,CAA+BN,GAA/B,CAAmC,UAASM,QAAT,EAAkB;AACjD,SAAOA,QAAP;AACH,CAFD,EAEE,UAASD,KAAT,EAAe;AACb;AACA,SAAOF,OAAO,CAACC,MAAR,CAAeC,KAAf,CAAP;AACH,CALD;;IAOME,W;;;;;;;;;yBAEWC,G,EAAMC,K,EAAM;AACrB,aAAO,IAAIN,OAAJ,CAAY,UAACO,OAAD,EAAUN,MAAV,EAAqB;AACpCX,QAAAA,QAAQ,CAACkB,IAAT,CAAcH,GAAd,EAAkBC,KAAlB,EAAyBG,IAAzB,CAA8B,UAAAN,QAAQ,EAAE;AACpCI,UAAAA,OAAO,CAACJ,QAAD,CAAP;AACH,SAFD;AAGH,OAJM,EAIJO,KAJI,CAIE,UAAAR,KAAK,EAAE;AACZD,QAAAA,MAAM,CAACC,KAAD,CAAN;AACH,OANM,CAAP;AAOH;;;wBAEUG,G,EAAMC,K,EAAM;AACnB;AACAhB,MAAAA,QAAQ,CAACqB,GAAT,CAAaN,GAAb,EAAkBC,KAAlB,EAAyBG,IAAzB,CAA8B,UAAAN,QAAQ,EAAE;AACpCI,QAAAA,OAAO,CAACJ,QAAD,CAAP;AACH,OAFD,EAEGO,KAFH,CAES,UAAAR,KAAK,EAAE;AACZD,QAAAA,MAAM,CAACC,KAAD,CAAN;AACH,OAJD;AAKH;;;;;;AAGL,eAAeE,WAAf","sourcesContent":["import axios from 'axios'\n\nconst base_url = \"http://localhost:3000\"\n\nvar instance = axios.create({\n    baseURL : base_url,\n    timeout : 15000,\n    headers : {\n        'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',\n    }\n})\n\ninstance.interceptors.request.use(function(config){\n    return config;\n},function(rrror){\n    return Promise.reject(error);\n})\n\n\ninstance.interceptors.response.use(function(response){\n    return response;\n},function(error){\n    // do something with response error\n    return Promise.reject(error)\n})\n\nclass DNAxiosTool {\n\n    static post (api , param){\n        return new Promise((resolve ,reject) => {\n            instance.post(api,param).then(response=>{\n                resolve(response)\n            })\n        }).catch(error=>{\n            reject(error)\n        })\n    }\n\n    static get(api , param){\n        debugger\n        instance.get(api ,param).then(response=>{\n            resolve(response)\n        }).catch(error=>{\n            reject(error)\n        })\n    }\n}\n\nexport default DNAxiosTool;"]},"metadata":{},"sourceType":"module"}